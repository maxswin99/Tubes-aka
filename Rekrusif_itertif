import time
import matplotlib.pyplot as plt
import numpy as np

# Algoritma Iteratif
def find_best_seat_iterative(seats):
    best_seat = None
    best_score = float('-inf')
    for seat in seats:
        score = evaluate_seat(seat)
        if score > best_score:
            best_score = score
            best_seat = seat
    return best_seat

# Algoritma Rekursif
def find_best_seat_recursive(seats):
    if len(seats) == 1:
        return seats[0]
    mid = len(seats) // 2
    left_best = find_best_seat_recursive(seats[:mid])
    right_best = find_best_seat_recursive(seats[mid:])
    return left_best if evaluate_seat(left_best) > evaluate_seat(right_best) else right_best

# Fungsi Evaluasi Dummy
def evaluate_seat(seat):
    return seat  # Contoh: nilai seat sama dengan posisi (misalnya jarak ke layar)

# Eksperimen
sizes = [10, 100, 1000, 5000, 10000]
iterative_times = []
recursive_times = []

for size in sizes:
    seats = list(range(size))  # Contoh kursi dengan nilai dummy
    # Iteratif
    start = time.time()
    find_best_seat_iterative(seats)
    iterative_times.append(time.time() - start)
    
    # Rekursif
    start = time.time()
    find_best_seat_recursive(seats)
    recursive_times.append(time.time() - start)

# Visualisasi
plt.plot(sizes, iterative_times, label="Iterative (O(n^3))", marker='o')
plt.plot(sizes, recursive_times, label="Recursive (O(n^2))", marker='o')
plt.xlabel("Number of Seats (n)")
plt.ylabel("Running Time (s)")
plt.title("Comparison of Iterative and Recursive Algorithms")
plt.legend()
plt.grid()
plt.show()
